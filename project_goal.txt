#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep 21 23:50:35 2022

@author: carljohan
"""

Goal of the project. Extend to support a broader range of polyomino-based games. 

The game implementation should be modular and allow something along the lines of the following:
    
    0. Candidate set of pieces in the game
        E.g. One set of pentominoes and 12 pre-specified hexominoes
    1. How players get their pieces:
        E.g. Draft from a pool, simultaneous draw, as resources obtained when playing on the map
    2. Which moves are legal? 
        E.g. Place anywhere, adjacent to existing piece, on top of existing pieces etc.
        The board could be a shared board between the players, or individual player boards (as in many Eurogames)
    3. How does the game end?
        E.g. 5 rounds of drafting 8 pieces in each
    4. How does a player win?
        E.g. Blokus - points for the sizes of pieces placed during the game;
             Isle of Cats - points for creating 'families' of multiple cats

Games to be supported by V1:

    1. Polyssimo Challenge [implemented]    
    2. Isle of Cats [implemented]
    3. Patchwork [implemented]
    4. Barenpark [implemented]
    5. Kingdomino    
    6. Llamaland
    7. Tetris Go
    8. My City
    9. Project L
    10. Copenhagen
    11. Battle of LITS

(V2 extension: Support hexagonal grids)

Many of the games have high/very high branching factor for each move (1000s). 

----------------

References:

- http://mrraow.com/index.php/aiai-home/ 
- https://github.com/cfuchs981/blokus-ai (Blokus implementation that this code was initially built on top of)
- https://github.com/danzel/PatchworkSim (Seems old and not well maintained. Patchwork is probably the wrong game for deep learning)
- https://github.com/pbsinclair42/MCTS/ (MCTS reference implementation)
- https://github.com/DenseLance/mcts-simple (Alternative MCTS package)
- https://github.com/ai-boson/mcts MCTS description with python implementation
- https://csfjournal.com/volume-4-issue-1-1/2021/9/24/reinforcement-learning-for-constraint-satisfaction-game-agents-15-puzzle-minesweeper-2048-and-sudoku


Frameworks inspired by Alphago Zero
- https://github.com/richemslie/galvanise_zero
- https://github.com/facebookarchive/Polygames


Polyomino tiling/fitting:

- https://stackoverflow.com/questions/59725560/finding-all-the-combinations-of-free-polyominoes-within-a-specific-area-with-a-s
- https://stackoverflow.com/questions/60618751/understanding-the-input-format-of-minizincs-geost-constraint
- https://www.minizinc.org/software.html

----------------

9/27 project log

- Isle of Cats family game implemented (without lessons) and a few bugs remaining 
- Competitive player (Catbert) using single move lookahead and benchmark opponent (Greedy_bot)
- Features generated in Board class for families (connected groups in one color)
- (bug) Rendering does not work well - not refreshing at start of game and end of game
- (bug) Passing/End of game is not handled correctly. Player should be able to pass their turn. If one player passes, the other player can play additional turns
- (bug) Rows/columns are mixed up in a few places
- (bug) Minimal error handling for move entry leads to crashes
- (improvement) GUI should display scoring during the game
- (improvement) GUI should allow for move entry using the mouse
- AI player improvements:
    - Add multi-ply search (e.g. min-max) or MCTS. Eval function may be too slow
    - Generate possible moves iteratively (or in batch)
    - Better handling of filling rooms
    - Include treasures in search instead of separately
    - Target zones to pick up the right treasure with the right color
    - Handling first moves(s) separately?
    - Parameter tweaking